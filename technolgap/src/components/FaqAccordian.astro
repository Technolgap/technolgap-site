---
import { marked } from 'marked';

interface FaqProps {
  faqList: FaqFields[];
  grey: boolean;
  markdown: boolean;
}

interface FaqFields {
  fields: {
    question: string;
    answer: string;
    appForm?: string;
    deadline?: string;
  };
  contentTypeId: "faq";
}

const { faqList, grey=false, volunteerRole=false} = Astro.props;

---

<div class="faq-container">
  {faqList.length != 0 ? faqList.map((faq: FaqFields, index: number) => (
    <div class={(grey ? "grey " : "green ")+"faq-item"}>
      <div class="faq-question">
        <h3>{faq.fields.question} </h3>
        <span class="arrow">&#9660;</span>
      </div>
      <div class=" faq-answer">
        {volunteerRole ? (
          <p set:html={marked(faq.fields.answer)}></p>
          <div class="volunteer-info">
            <h5>Application Due: {faq.fields.deadline}</h5>
            <a class="app-form button" href={faq.fields.appForm} target="_blank">Apply</a>
          </div>
        ) : (
        <p>{faq.fields.answer}</p>
        )}
      </div>
    </div>
  )) : <p style={`color: ${grey ? "#5A6160" : "#2d6d68"}; text-align: center; font-weight: bold;`}>No {volunteerRole ? "Volunteer Roles" : "FAQs"} Available</p>}
</div>

<style>

  .volunteer-info {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 20px;
  }

  .app-form {
    text-decoration: none;
    margin-right: 25px;
    border-radius: 10px;
    display: inline-block;
    font-size: 20px;
    position: relative;
    border: solid 3px #60a0a1;
  }

  .volunteer-info > h5 {
    display: inline;
    color: #eeffff;
  }

  .grey {
    background-color: #5A6160;
  }
  
  .green {
    background-color: #2d6d68; 

  }

    .faq-container {
      display: flex;
      flex-direction: column;
      gap: 1rem;
      width: 70%; /* Set width to 70% of the page */
      max-width: 900px; /* Optional: Add a max-width to limit the size */
      margin: 0 auto; /* Center align horizontally */
      padding-bottom: 100px;
    }

    h3, p {
      margin: 0;
      color:white; 
    }

    p {
      font-size: 17px;
    }
    
    .faq-item {
      padding: 1.5rem; 
      border-radius: 15px;
    }
    
    .faq-question {
      display: flex;
      justify-content: space-between;
      align-items: center;
      cursor: pointer;
    }
  
    .faq-answer {
      display: none;
      padding-top: 1rem;
      color: white;
    }
  
    .faq-item.open .faq-answer {
      display: block;
    }
  
    .faq-item.open .arrow {
      transform: rotate(180deg);
    }


    @media (max-width: 700px) {
      .app-form {
        font-weight: 400;
        padding: 10px 30px;
        font-size: 20px;
      }
    }

    @media (max-width: 550px) {
      .volunteer-info > h5 {
        display: block;
      }

      .app-form {
        display: block;
      }

      .volunteer-info 
      {
        display: block;
      }

      .faq-answer p {
        font-size: 13px;
      }

      .faq-question h3 {
        font-size: 18px;
      }

      .faq-container {
        width: 90%;
      }
    }

  </style>
  
<script>
  document.querySelectorAll('.faq-item').forEach(item => {
    const toggleButton = item.querySelector('.faq-question');
    
    // Ensure toggleButton is not null before adding the event listener
    if (toggleButton) {
      toggleButton.addEventListener('click', () => {
        item.classList.toggle('open');
      });
    }
  });
</script>
